{
  "version": 3,
  "sources": ["../src/open-ports-menu-bar.tsx", "../src/hooks/useProcesses.ts", "../src/models/Process.ts", "../src/utilities/isDigit.ts", "../src/models/constants.ts", "../src/utilities/killProcess.ts"],
  "sourcesContent": ["import { MenuBarExtra, getPreferenceValues, showHUD } from \"@raycast/api\";\nimport { useEffect, useState } from \"react\";\nimport useProcesses from \"./hooks/useProcesses\";\nimport { KillSignal, killProcess } from \"./utilities/killProcess\";\n\nfunction removeDuplicates<T>(array: T[], key: keyof T) {\n  return array.filter((v, i, a) => a.findIndex((t) => t[key] === v[key]) === i);\n}\n\nconst preferences = getPreferenceValues<Preferences>();\n\nexport default function Command() {\n  const [processes, reload] = useProcesses();\n  const isLoading = useLoadingTimeout(processes.length === 0, 1000);\n\n  const openPorts = removeDuplicates(\n    processes\n      .filter((p) => p.portInfo !== undefined && p.portInfo.length > 0)\n      .flatMap((p) => {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return p.portInfo!.map((info) => ({ port: `${info.port}`, process: p }));\n      }),\n    \"port\"\n  );\n\n  return (\n    <MenuBarExtra\n      isLoading={isLoading}\n      icon={{ source: { light: \"menu-bar-icon-light.png\", dark: \"menu-bar-icon-dark.png\" } }}\n    >\n      {openPorts.map((openPort) => (\n        <MenuBarExtra.Submenu key={openPort.port} title={openPort.port}>\n          <MenuBarExtra.Section title={openPort.process.name ?? \"Untitled Process\"}>\n            <MenuBarExtra.Item\n              title=\"Kill\"\n              onAction={async () => {\n                await killProcess(openPort.process, {\n                  onError() {\n                    showHUD(\"\u26A0\uFE0F Failed to kill process\");\n                  },\n                  onKilled() {\n                    reload();\n                  },\n                  killSignal: preferences.killSignal === \"ask\" ? KillSignal.TERM : preferences.killSignal,\n                });\n              }}\n            />\n          </MenuBarExtra.Section>\n        </MenuBarExtra.Submenu>\n      ))}\n    </MenuBarExtra>\n  );\n}\n\nfunction useLoadingTimeout(current: boolean, timeout: number) {\n  const [isLoading, setIsLoading] = useState(current);\n\n  useEffect(() => {\n    if (current) {\n      setIsLoading(true);\n      const timer = setTimeout(() => {\n        setIsLoading(false);\n      }, timeout);\n      return () => clearTimeout(timer);\n    }\n  }, [current, timeout]);\n\n  return isLoading;\n}\n", "import { useCallback, useEffect, useState } from \"react\";\nimport Process from \"../models/Process\";\n\nexport default function useProcesses(): [Process[], () => Promise<void>] {\n  const [processes, setProcesses] = useState<Process[]>([]);\n  const reloadProcesses = useCallback(async () => {\n    const processes = await Process.getCurrent();\n    setProcesses(processes);\n  }, [setProcesses]);\n\n  useEffect(() => {\n    (async () => {\n      reloadProcesses();\n    })();\n  }, []);\n\n  return [processes, reloadProcesses];\n}\n", "import { Alert, closeMainWindow, confirmAlert, getPreferenceValues, open } from \"@raycast/api\";\nimport { exec as cExec } from \"child_process\";\nimport { promisify } from \"util\";\nimport isDigit from \"../utilities/isDigit\";\nimport { LsofPrefix, readmeURL } from \"./constants\";\nimport { PortInfo, ProcessInfo } from \"./interfaces\";\n\nconst exec = promisify(cExec);\n\nexport default class Process implements ProcessInfo {\n  private static useSudo: boolean = getPreferenceValues().sudo ?? false;\n\n  public path?: string;\n  public parentPath?: string;\n  private constructor(\n    public readonly pid: number,\n    public readonly name?: string,\n    public readonly parentPid?: number,\n    public readonly user?: string,\n    public readonly uid?: number,\n    public readonly protocol?: string,\n    public readonly portInfo?: PortInfo[],\n    public readonly internetProtocol?: string\n  ) {}\n\n  private async getProcessPath(pid: number, useSudo: boolean) {\n    const cmd = `${useSudo ? \"/usr/bin/sudo \" : \"\"}/bin/ps -p ${pid} -o comm=`;\n    const { stdout, stderr } = await exec(cmd);\n    if (stderr) throw new Error(stderr);\n    return stdout.replace(\"\\n\", \"\");\n  }\n\n  public async loadPath() {\n    this.path = await this.getProcessPath(this.pid, Process.useSudo);\n  }\n\n  public async loadParentPath() {\n    if (this.parentPid === undefined) return;\n    this.parentPath = await this.getProcessPath(this.parentPid, Process.useSudo);\n  }\n\n  public static async getCurrent() {\n    const cmd = `${Process.useSudo ? \"/usr/bin/sudo \" : \"\"}/usr/sbin/lsof +c0 -iTCP -w -sTCP:LISTEN -P -FpcRuLPn`;\n\n    try {\n      const { stdout, stderr } = await exec(cmd);\n      if (stderr) throw new Error(stderr);\n      const processes = stdout.split(\"\\np\");\n      const instances: Process[] = [];\n      for (const process of processes) {\n        if (process.length === 0) continue;\n        const lines = process.split(\"\\n\");\n        const values: ProcessInfo = { pid: 0 };\n        for (const line of lines) {\n          if (line.length === 0) continue;\n          const prefix = line[0];\n          const value = line.slice(1);\n          if (value.length === 0) continue;\n          switch (prefix) {\n            case LsofPrefix.PROCESS_ID:\n              values.pid = Number(value);\n              break;\n            case LsofPrefix.PROCESS_NAME:\n              values.name = value;\n              break;\n            case LsofPrefix.PARENT_PROCESS_ID:\n              values.parentPid = Number(value);\n              break;\n            case LsofPrefix.USER_NAME:\n              values.user = value;\n              break;\n            case LsofPrefix.USER_ID:\n              values.uid = Number(value);\n              break;\n            case LsofPrefix.PROTOCOL:\n              values.protocol = value;\n              break;\n            case LsofPrefix.PORTS:\n              values.portInfo\n                ? values.portInfo.push({\n                    host: value.split(\":\")[0],\n                    port: Number(value.split(\":\")[1]),\n                  })\n                : (values.portInfo = [\n                    {\n                      host: value.split(\":\")[0],\n                      port: Number(value.split(\":\")[1]),\n                    },\n                  ]);\n              break;\n            case LsofPrefix.INTERNET_PROTOCOLL:\n              values.internetProtocol = value;\n              break;\n            default:\n              if (isDigit(prefix)) values.pid = Number(`${prefix}${value}`);\n              break;\n          }\n        }\n        const p = new Process(\n          values.pid,\n          values.name,\n          values.parentPid,\n          values.user,\n          values.uid,\n          values.protocol,\n          values.portInfo\n        );\n        await p.loadPath();\n        await p.loadParentPath();\n        instances.push(p);\n      }\n      return instances;\n    } catch (e) {\n      if (e instanceof Error) {\n        if (e.message.includes(\"sudo: a terminal is required to read the password\")) {\n          const alertOptions: Alert.Options = {\n            title: \"Can't Use Sudo\",\n            message:\n              \"It seems your user can't use sudo without a password. Please turn off using sudo in the extension preferences or change your sudo configuration.\",\n            primaryAction: {\n              title: \"Learn More\",\n            },\n            dismissAction: {\n              title: \"Close Raycast\",\n            },\n          };\n          if (await confirmAlert(alertOptions)) {\n            await open(readmeURL);\n            await closeMainWindow();\n          } else {\n            await closeMainWindow();\n          }\n        }\n        throw e;\n      } else throw e;\n    }\n  }\n}\n", "export default function isDigit(character: string) {\n  return !Number.isNaN(Number(character));\n}\n", "export enum LsofPrefix {\n  PROCESS_NAME = \"c\",\n  PROCESS_ID = \"p\",\n  PARENT_PROCESS_ID = \"R\",\n  USER_ID = \"u\",\n  USER_NAME = \"L\",\n  PROTOCOL = \"P\",\n  PORTS = \"n\",\n  INTERNET_PROTOCOLL = \"t\",\n}\n\nexport const readmeURL = \"https://www.raycast.com/lucaschultz/port-manager\";\n", "import { exec as cExec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { ProcessInfo } from \"../models/interfaces\";\n\nconst exec = promisify(cExec);\n\nexport const KillSignal = {\n  /** Hang Up */\n  HUP: \"1\",\n\n  /** Interrupt */\n  INT: \"2\",\n\n  /** Quit */\n  QUIT: \"3\",\n\n  /** Abort */\n  ABRT: \"6\",\n\n  /** Non-catchable, non-ignorable kill */\n  KILL: \"9\",\n\n  /** Alarm clock */\n  ALRM: \"14\",\n\n  /** Software termination signal */\n  TERM: \"15\",\n};\n\nexport type KillSignal = typeof KillSignal[keyof typeof KillSignal];\n\nexport async function kill(pid: number | number[], signal: KillSignal, useSudo: boolean) {\n  const pidString = pid instanceof Array ? pid.join(\" \") : pid;\n  const cmd = `${useSudo ? \"/usr/bin/sudo /bin/kill\" : \"kill\"} -${signal} ${pidString}`;\n\n  const { stderr } = await exec(cmd);\n  if (stderr) throw new Error(stderr);\n}\n\nexport async function killall(processname: string | string[], signal: KillSignal, useSudo: boolean) {\n  const processnameString =\n    processname instanceof Array ? processname.map((n) => `'${n}'`).join(\" \") : `'${processname}'`;\n  const cmd = `${useSudo ? \"/usr/bin/sudo \" : \"\"}/usr/bin/killall -${signal} ${processnameString}`;\n  const { stderr } = await exec(cmd);\n  if (stderr) throw new Error(stderr);\n}\n\nexport async function killProcess(\n  process: ProcessInfo,\n  options?: Partial<{\n    killSignal?: KillSignal;\n    useSudo?: boolean;\n    killAll?: boolean;\n    killParent?: boolean;\n    onKilled?: () => void;\n    onError?: (error: unknown) => void;\n  }>\n) {\n  const {\n    killSignal = KillSignal.TERM,\n    useSudo = false,\n    killAll = false,\n    killParent = false,\n    onError,\n    onKilled,\n  } = options ?? {};\n\n  const killer = async () => {\n    if (killAll) {\n      if (process.name === undefined) throw new Error(\"Can't use killall because process name is undefined\");\n      await killall(process.name, killSignal, useSudo);\n      return;\n    }\n\n    if (killParent) {\n      if (process.parentPid === undefined) throw new Error(\"Can't kill parent because parent pid is undefined\");\n      await kill(process.parentPid, killSignal, useSudo);\n      return;\n    }\n\n    await kill(process.pid, killSignal, useSudo);\n  };\n\n  try {\n    await killer();\n    onKilled && onKilled();\n  } catch (e) {\n    console.log(e);\n    onError && onError(e);\n  }\n}\n"],
  "mappings": "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",
  "names": ["open_ports_menu_bar_exports", "__export", "Command", "__toCommonJS", "import_api", "import_react", "import_react", "import_api", "import_child_process", "import_util", "isDigit", "character", "readmeURL", "exec", "cExec", "_Process", "pid", "name", "parentPid", "user", "uid", "protocol", "portInfo", "internetProtocol", "useSudo", "cmd", "stdout", "stderr", "processes", "instances", "process", "lines", "values", "line", "prefix", "value", "isDigit", "e", "readmeURL", "Process", "useProcesses", "processes", "setProcesses", "reloadProcesses", "Process", "import_child_process", "import_util", "exec", "cExec", "KillSignal", "kill", "pid", "signal", "useSudo", "pidString", "cmd", "stderr", "killall", "processname", "processnameString", "n", "killProcess", "process", "options", "killSignal", "killAll", "killParent", "onError", "onKilled", "killer", "e", "import_jsx_runtime", "removeDuplicates", "array", "key", "v", "i", "a", "t", "preferences", "Command", "processes", "reload", "useProcesses", "isLoading", "useLoadingTimeout", "openPorts", "p", "info", "openPort", "killProcess", "KillSignal", "current", "timeout", "setIsLoading", "timer"]
}
